{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "MageGameScript",
	"patterns": [
		{ "include": "#comment_node" },
		{ "include": "#dialog_settings_node" },
		{ "include": "#dialog_node" },
		{ "include": "#script_node" }
	],
	"repository": {
		"comment_node": {
			"patterns": [
				{ "include": "#comment_block" },
				{ "include": "#comment_inline" }
			]
		},
		"comment_block": {
			"begin": "/\\*",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment"
				}
			},
			"end": "\\*/",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment"
				}
			},
			"name": "comment.block",
			"patterns": [
				{
					"name": "comment.block",
					"match": ".+?"
				}
			]
		},
		"comment_inline": {
			"begin": "\/\/",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment"
				}
			},
			"end": "\n",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment"
				}
			},
			"name": "comment.line.double-slash",
			"patterns": [
				{
					"name": "comment.block",
					"match": ".+?"
				}
			]
		},
		"dialog_settings_node": {
			"begin": "(settings)(\\s+for)?\\s+(dialog)\\s*({)",
			"beginCaptures": {
				"1": { "name": "support.type" },
				"3": { "name": "variable.parameter.mgs support.variable.mgs" },
				"4": { "name": "mega.block.mgs punctuation.section.block.begin.mgs" }
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "mega.block.mgs punctuation.section.block.end.mgs"
				}
			},
			"patterns": [
				{ "include": "#comment_node" },
				{ "include": "#dialog_settings_block_body" }
			]
		},
		"dialog_settings_block_body": {
			"patterns": [
				{ "include": "#comment_node" },
				{ "include": "#dialog_settings_individual_parameters_node" },
				{ "include": "#dialog_settings_global_parameters_node" }
			]
		},
		"dialog_settings_individual_parameters_node": {
			"begin": "\\b(parameters)(\\s+for)?\\s+(label|entity)\\s+(([^\\s'\"]+)|(['\"])[^`]*?\\6)\\s+({)",
			"beginCaptures": {
				"1": {
					"name": "support.type.mgs"
				},
				"3": {
					"name": "variable.parameter.mgs support.variable.mgs"
				},
				"4": {
					"name": "support.type.mgs"
				},
				"7": {
					"name": "mega.block.mgs punctuation.section.block.begin.mgs"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "mega.block.mgs punctuation.section.block.end.mgs"
				}
			},
			"patterns": [
				{ "include": "#comment_node" },
				{ "include": "#dialog_parameter" }
			]
		},
		"dialog_settings_global_parameters_node": {
			"begin": "\\b(parameters\\s+)?(for\\s+)?(global\\s+)?(defaults?\\s+)({)",
			"beginCaptures": {
				"1": {
					"name": "support.type"
				},
				"3": {
					"name": "variable.parameter.mgs support.variable.mgs"
				},
				"4": {
					"name": "keyword.other"
				},
				"5": {
					"name": "mega.block.mgs punctuation.section.block.begin.mgs"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "mega.block.mgs punctuation.section.block.end.mgs"
				}
			},
			"patterns": [
				{ "include": "#comment_node" },
				{ "include": "#dialog_parameter" }
			]
		},
		"dialog_parameter": {
			"patterns": [
				{
					"match": "\\b(entity)\\s+(\")(%PLAYER%|%SELF%)(\")",
					"captures": {
						"1": {
							"name": "variable.parameter.mgs support.variable.mgs"
						},
						"2": {
							"name": "string.variable.mgs"
						},
						"3": {
							"name": "punctuation.definition.variable.mgs variable.language.mgs"
						},
						"4": {
							"name": "string.variable.mgs"
						}
					}
				},
				{
					"match": "\\b(entity)\\s+(([-A-Za-z0-9_.#$]+)|(['\"])([^`]*?)\\4)\\s",
					"captures": {
						"0": {
							"name": "string.variable.mgs"
						},
						"1": {
							"name": "variable.parameter.mgs support.variable.mgs"
						},
						"3": {
							"name": "support.type.mgs"
						},
						"5": {
							"name": "support.type.mgs"
						}
					}
				},
				{
					"match": "\\b(name)\\s+(['\"])(%[^%]+%)(\\2)",
					"captures": {
						"0": {
							"name": "string.variable.mgs"
						},
						"1": {
							"name": "variable.parameter.mgs support.variable.mgs"
						},
						"3": {
							"name": "punctuation.definition.variable.mgs variable.language.mgs"
						},
						"4": {
							"name": "string.variable.mgs"
						}
					}
				},
				{
					"match": "\\b(emote)\\s+([0-9]+)\\b",
					"captures": {
						"1": {
							"name": "variable.parameter.mgs support.variable.mgs"
						},
						"2": {
							"name": "constant.numeric.integer.mgs"
						}
					}
				},
				{
					"match": "\\b(name|portrait|border_tileset)\\s+(([-A-Za-z0-9_.#$]+)|(['\"])[^`]*?\\4)\\s",
					"captures": {
						"1": {
							"name": "variable.parameter.mgs support.variable.mgs"
						},
						"2": {
							"name": "string.variable.mgs"
						}
					}
				},
				{
					"match": "\\b(alignment)\\s+(TR|BR|TL|BL|TOP_RIGHT|BOTTOM_RIGHT|TOP_LEFT|BOTTOM_LEFT)\\b",
					"captures": {
						"1": {
							"name": "variable.parameter.mgs support.variable.mgs"
						},
						"2": {
							"name": "constant.language.mgs"
						}
					}
				},
				{
					"match": "\\b(wrap)\\s+(messages|serial)(\\s+to)?\\s+([0-9]+)\\b",
					"captures": {
						"1": {
							"name": "keyword.control.assignment.mgs"
						},
						"2": {
							"name": "variable.parameter.mgs support.variable.mgs"
						},
						"3": {
							"name": "keyword.operator.mgs"
						},
						"4": {
							"name": "constant.numeric.integer.mgs"
						}
					}
				}
			]
		},
		"dialog_option_goto": {
			"match": "(:)\\s*(goto\\s)?(script\\s)?(((['\"])[^`]*?\\6)|[-A-Za-z0-9_.#$]+)",
			"captures": {
				"1": {
					"name": "keyword.operator"
				},
				"2": {
					"name": "keyword.control.mgs"
				},
				"3": {
					"name": "variable.parameter.mgs support.variable.mgs"
				},
				"4": {
					"name": "entity.name.function.mgs"
				}
			}
		},
		"dialog_body": {
			"patterns": [
				{ "include": "#comment_node" },
				{ "include": "#dialog_parameter" },
				{ "include": "#dialog_message" },
				{ "include": "#dialog_option_goto" },
				{
					"match": "[:>]",
					"name": "keyword.operator.mgs"
				},
				{ "include": "#dialog_bareword_identifier" }
			]
		},
		"dialog_message": {
			"begin": "(?<!\\\\)(?:\\\\{2})*\\K\"",
			"beginCaptures": {
				"0": { "name": "string.quoted.double.mgs string.variable.mgs" }
			},
			"end": "(?<!\\\\)(?:\\\\{2})*\\K\"",
			"endCaptures": {
				"0": { "name": "string.quoted.double.mgs string.variable.mgs" }
			},
			"patterns": [
				{
					"match": "\\\\[n\"$%]",
					"name": "constant.character.escape.mgs"
				},
				{
					"match": "[%][^%]+?[%]",
					"name": "punctuation.definition.variable.mgs variable.language.mgs"
				},
				{
					"match": "\\$[^\\$]+?\\$",
					"name": "punctuation.definition.variable.mgs variable.language.mgs"
				},
				{
					"match": ".+?",
					"name": "string.variable.mgs"
				}
			]
		},
		"dialog_bareword_identifier": {
			"match": "\\b[-A-Za-z0-9_.#$]+\\b",
			"name": "support.type.mgs"
		},
		"dialog_node": {
			"begin": "\\b(dialog)(\\s+(([-A-Za-z0-9_.#$]+|(['\"])[^`]*?\\5)))?\\s+({)",
			"beginCaptures": {
				"1": { "name": "keyword.control.assignment.mgs" },
				"2": { "name": "variable.parameter.mgs support.variable.mgs" },
				"6": { "name": "mega.block.mgs punctuation.section.block.begin.mgs" }
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "mega.block.mgs punctuation.section.block.end.mgs"
				}
			},
			"patterns": [
				{ "include": "#dialog_body" }
			]
		},
		"show_dialog_node": {
			"begin": "\\b(show)\\s+(dialog)(\\s+(([-A-Za-z0-9_.#$]+|(['\"])[^`]*?\\6)))?\\s+({)",
			"beginCaptures": {
				"1": { "name": "keyword.control.assignment.mgs" },
				"2": { "name": "variable.parameter.mgs support.variable.mgs" },
				"3": { "name": "string.quoted.double.mgs string.variable.mgs" },
				"7": { "name": "mega.block.mgs punctuation.section.block.begin.mgs" }
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "mega.block.mgs punctuation.section.block.end.mgs"
				}
			},
			"patterns": [
				{ "include": "#dialog_body" }
			]
		},
		"if_then": {
			"begin": "\\bif\\b",
			"beginCaptures": {
				"0": { "name": "keyword.control.conditional.mgs" }
			},
			"end": "(\\bthen\\b)|\\n",
			"endCaptures": {
				"0": { "name": "keyword.control.conditional.mgs" }
			},
			"patterns": [
				{ "include": "#conditions" }
			]
		},
		"conditions": {
			"patterns": [
				{
					"match": "\\b(button)(\\s+(MEM0|MEM1|MEM2|MEM3|BIT128|BIT64|BIT32|BIT16|BIT8|BIT4|BIT2|BIT1|XOR|ADD|SUB|PAGE|LJOY_CENTER|LJOY_UP|LJOY_DOWN|LJOY_LEFT|LJOY_RIGHT|RJOY_CENTER|RJOY_UP|RJOY_DOWN|RJOY_LEFT|RJOY_RIGHT|TRIANGLE|X|CROSS|CIRCLE|O|SQUARE|HAX|ANY))?\\b",
					"captures": {
						"0": { "name": "variable.parameter.mgs support.variable.mgs" },
						"2": { "name": "constant.language.mgs" }
					}
				},
				{
					"match": "\\b(entity)\\s+((['\"])(%PLAYER%|%SELF%)\\3)",
					"captures": {
						"1": { "name": "variable.parameter.mgs support.variable.mgs" },
						"2": { "name": "string.variable.mgs" },
						"4": { "name": "punctuation.definition.variable.mgs variable.language.mgs" }
					}
				},
				{
					"match": "\\b(flag|variable|entity|geometry)\\s+((([-A-Za-z0-9_.#$]+\\b)|(['\"])[^`]*?\\5))?",
					"captures": {
						"1": { "name": "variable.parameter.mgs support.variable.mgs" },
						"3": { "name": "string.variable.mgs" }
					}
				},
				{
					"match": "\\b(interactScript|tickScript|lookScript)\\s+is\\s+(not\\s+)?([-A-Za-z0-9_.#$]+|(['\"])[^`]*?\\4)",
					"captures": {
						"1": { "name": "variable.parameter.mgs support.variable.mgs" },
						"3": { "name": "entity.name.function.mgs" }
					}
				},
				{
					"match": "\\b(direction)\\s+is\\s+(not\\s+)?(north|south|east|west)",
					"captures": {
						"1": { "name": "variable.parameter.mgs support.variable.mgs" },
						"3": { "name": "constant.language.mgs" }
					}
				},
				{
					"match": "\\bis\\s+(not\\s+)?(true|false|on|off|glitched|unglitched)\\b",
					"captures": {
						"1": { "name": "keyword.operator.logical.mgs" },
						"2": { "name": "constant.language.mgs" }
					}
				},
				{
					"match": "\\bis\\s+(not\\s+)?(currently\\s+pressed|inside)\\b",
					"captures": {
						"1": { "name": "keyword.operator.logical.mgs" },
						"2": { "name": "keyword.operator.logical.mgs" }
					}
				},
				{
					"match": "\\bis\\s+(not\\s+)?((==|<=|<|>|>=)\\s+)?([0-9]+)\\b",
					"captures": {
						"1": { "name": "keyword.operator.logical.mgs" },
						"2": { "name": "keyword.operator.logical.mgs" },
						"4": { "name": "constant.numeric.integer.mgs" }
					}
				},
				{
					"match": "\\bis\\s+(not\\s+)?((==|<=|<|>|>=)\\s+)?((([-A-Za-z0-9_.#$]+\\b)|(['\"])[^`]*?\\7))",
					"captures": {
						"1": { "name": "keyword.operator.logical.mgs" },
						"2": { "name": "keyword.operator.logical.mgs" },
						"4": { "name": "string.variable.mgs" }
					}
				},
				{
					"match": "\\b(name|type|path)\\s+is\\s+(not\\s+)?(([-A-Za-z0-9_.#$]+)|(['\"])[^`]*?\\5)",
					"captures": {
						"1": { "name": "variable.parameter.mgs support.variable.mgs" },
						"2": { "name": "keyword.operator.logical.mgs" },
						"3": { "name": "string.variable.mgs" }
					}

				},
				{
					"match": "\\b(x|y|primaryID|secondaryID|primaryIDtype|animation|animationFrame|hackableStateA|hackableStateB|hackableStateC|hackableStateD|hackableStateAU2|hackableStateCU2|hackableStateAU4)\\s+is\\s+(not\\s+)?([0-9]+)",
					"captures": {
						"1": { "name": "variable.parameter.mgs support.variable.mgs" },
						"2": { "name": "keyword.operator.logical.mgs" },
						"3": { "name": "constant.numeric.integer.mgs" }
					}

				}
			]
		},
		"zigzag": {
			"patterns": [
				{ "include": "#zigzag_condition" },
				{ "include": "#zigzag_else_body" },
				{ "include": "#zigzag_body" }
			]
		},
		"zigzag_condition": {
			"begin": "\\b(if|else\\s*if)\\s+(\\()",
			"beginCaptures": {
				"0": { "name": "keyword.control.conditional.mgs" },
				"1": { "name": "meta.parens.mgs punctuation.section.parens.begin" }
			},
			"end": "\\)",
			"endCaptures": {
				"0": { "name": "meta.parens.mgs punctuation.section.parens.end" }
			},
			"patterns": [
				{ "include": "#comment_node" },
				{ "include": "#conditions" },
				{
					"match": "\\|\\|",
					"name": "keyword.operator.logical.mgs"
				}
			]
		},
		"zigzag_body": {
			"begin": "(\\{)",
			"beginCaptures": {
				"1": { "name": "keyword.control.conditional.mgs" },
				"2": { "name": "mega.block.mgs punctuation.section.block.begin.mgs" }
			},
			"end": "\\}",
			"endCaptures": {
				"0": { "name": "mega.block.mgs punctuation.section.block.end.mgs" }
			},
			"patterns": [
				{ "include": "#comment_node" },
				{ "include": "#zigzag" },
				{ "include": "#script_body" }
			]
		},
		"zigzag_else_body": {
			"begin": "\\belse\\s+(\\{)",
			"beginCaptures": {
				"0": { "name": "keyword.control.conditional.mgs" },
				"1": { "name": "mega.block.mgs punctuation.section.block.begin.mgs" }
			},
			"end": "\\}",
			"endCaptures": {
				"0": { "name": "mega.block.mgs punctuation.section.block.end.mgs" }
			},
			"patterns": [
				{ "include": "#comment_node" },
				{ "include": "#script_body" }
			]
		},
		"script_body": {
			"patterns": [
				{ "include": "#comment_node" },
				{ "include": "#zigzag" },
				{ "include": "#show_dialog_node" },
				{ "include": "#if_then" },
				{
					"name": "keyword.control.mgs",
					"match": "\\b(make|walk|loop|turn|rotate|teleport|pan|loop|play|load|set|fade\\s+in|fade\\s+out|load|erase|save|open|close|wait|block|shake)\\b"
				},
				{
					"name": "variable.parameter.mgs support.variable.mgs",
					"match": "\\b(animation|slot|camera|player\\s+control|hex\\s+(dialog\\s+mode|control|clipboard|editor))\\b"
				},
				{
					"match": "\\b(to\\s+)?(true|false|on|off|glitched|unglitched)\\b",
					"captures": {
						"1": { "name": "keyword.operator.logical.mgs" },
						"2": { "name": "constant.language.mgs" }
					}
				},
				{
					"name": "constant.language.mgs",
					"match": "\\b(north|south|east|west)\\b"
				},
				{
					"match": "\\b(name|type|path)(\\s+to)?\\s+([-A-Za-z0-9_.#$]+|(['\"])[^`]*?\\4)?",
					"captures": {
						"1": { "name": "variable.parameter.mgs support.variable.mgs" },
						"2": { "name": "keyword.operator.logical.mgs" },
						"3": { "name": "string.variable.mgs" }
					}
				},
				{
					"match": "\\b(x|y|primaryID|secondaryID|primaryIDtype|animation|animationFrame|hackableStateA|hackableStateB|hackableStateC|hackableStateD|hackableStateAU2|hackableStateCU2|hackableStateAU4)(\\s+to)?\\s+([0-9]]+)?",
					"captures": {
						"1": { "name": "variable.parameter.mgs support.variable.mgs" },
						"2": { "name": "keyword.operator.logical.mgs" },
						"3": { "name": "constant.numeric.integer.mgs" }
					}
				},
				{ "include": "#script_constants" },
				{
					"match": "\\b(to|from)\\s+(#[0-9A-F]+)?\\b",
					"captures": {
						"1": { "name": "keyword.operator.logical.mgs" },
						"2": { "name": "constant.numeric.integer.mgs" }
					}
				},
				{
					"match": "\\b(along|follow|toward|from|into|over|for)\\b",
					"captures": {
						"1": { "name": "keyword.operator.logical.mgs" }
					}
				},
				{
					"patterns": [
						{
							"begin": "(copy\\s+)?(entity|geometry)\\s+(\")",
							"beginCaptures": {
								"1": { "name": "keyword.control.mgs" },
								"2": { "name": "variable.parameter.mgs support.variable.mgs" },
								"3": { "name": "string.quoted.double.mgs punctuation.definition.string.begin.mgs" }
							},
							"end": "\"",
							"endCaptures": {
								"0": { "name": "string.quoted.double.mgs punctuation.definition.string.end.mgs" }
							},
							"patterns": [
								{
									"name": "punctuation.definition.variable.mgs variable.language.mgs",
									"match": "(%PLAYER%|%PATH%|%SELF%)"
								},
								{
									"name": "string.quoted.double.mgs string.variable.mgs",
									"match": "[^\"]"
								}
							]
						},
						{
							"begin": "(copy\\s+)?(entity|geometry)\\s+(')",
							"beginCaptures": {
								"1": { "name": "keyword.control.mgs" },
								"2": { "name": "variable.parameter.mgs support.variable.mgs" },
								"3": { "name": "string.quoted.double.mgs punctuation.definition.string.begin.mgs" }
							},
							"end": "'",
							"endCaptures": {
								"0": { "name": "string.quoted.single.mgs punctuation.definition.string.end.mgs" }
							},
							"patterns": [
								{
									"name": "punctuation.definition.variable.mgs variable.language.mgs",
									"match": "(%PLAYER%|%PATH%|%SELF%)"
								},
								{
									"name": "string.quoted.double.mgs string.variable.mgs",
									"match": "[^']"
								}
							]
						}
					]
				},
				{
					"match": "\\b(map tickScript)(\\s+to)?\\s+(([-A-Za-z0-9_.#$]+|(['\"])[^`]*?\\5))",
					"captures": {
						"1": { "name": "variable.parameter.mgs support.variable.mgs" },
						"2": { "name": "keyword.operator.logical.mgs" },
						"3": { "name": "entity.name.function.mgs" }
					}
				},
				{
					"match": "\\b(copy\\s+)?(flag|variable|map|geometry|entity)\\s+(([-A-Za-z0-9_.#$]+|(['\"])[^`]*?\\5))?",
					"captures": {
						"1": { "name": "keyword.control.mgs" },
						"2": { "name": "variable.parameter.mgs support.variable.mgs" },
						"3": { "name": "string.variable.mgs" }
					}
				},
				{
					"match": "\\b(goto|copy)\\s+(script\\s+)?(([-A-Za-z0-9_.#$]+|(['\"])[^`]*?\\5))",
					"captures": {
						"1": { "name": "keyword.control.mgs" },
						"2": { "name": "variable.parameter.mgs support.variable.mgs" },
						"3": { "name": "entity.name.function.mgs" }
					}
				},
				{
					"match": "\\b(warp\\s+state|serial\\s+connect(\\s+message)?)(\\s+to)?\\s+(([-A-Za-z0-9_.#$]+|(['\"])[^`]*?\\6))?",
					"captures": {
						"1": { "name": "variable.parameter.mgs support.variable.mgs" },
						"2": { "name": "variable.parameter.mgs support.variable.mgs" },
						"4": { "name": "string.variable.mgs" }
					}
				},
				{
					"match": "\\b(flag|geometry|map|variable|entity|dialog|serial\\s+dialog)\\s+((([-A-Za-z0-9_.#$]+\\b)|(['\"])[^`]*?\\5))?",
					"captures": {
						"1": { "name": "variable.parameter.mgs support.variable.mgs" },
						"3": { "name": "string.variable.mgs" }
					}
				},
				{
					"match": "\\b(show)\\s+((serial\\s+)?dialog)\\s+(([-A-Za-z0-9_.#$]+|(['\"])[^`]*?\\6))",
					"captures": {
						"1": { "name": "keyword.control.mgs" },
						"2": { "name": "variable.parameter.mgs support.variable.mgs" },
						"4": { "name": "string.variable.mgs" }
					}
				},
				{
					"match": "\\b(mutate)\\s+(([-A-Za-z0-9_.#$]+|(['\"])[^`]*?\\4))",
					"captures": {
						"1": { "name": "keyword.control.mgs" },
						"3": { "name": "string.variable.mgs" }
					}
				},
				{
					"match": "\\b(interactScript|tickScript|lookScript)\\s+(to\\s+)?([-A-Za-z0-9_.#$]+|(['\"])[^`]*?\\4)",
					"captures": {
						"1": { "name": "variable.parameter.mgs support.variable.mgs" },
						"3": { "name": "entity.name.function.mgs" }
					}
				},
				{
					"match": "(SET|ADD|SUB|MUL|DIV|MOD|RNG|set|add|sub|mul|div|mod|rng|=|\\+|-|\\*|\\/|%|\\?|==|<=|<|>|>=)\\s+([0-9]+)\\b",
					"captures": {
						"1": { "name": "keyword.operator.logical.mgs" },
						"2": { "name": "constant.numeric.integer.mgs" }
					}
				},
				{
					"match": "(SET|ADD|SUB|MUL|DIV|MOD|RNG|set|add|sub|mul|div|mod|rng|=|\\+|-|\\*|\\/|%|\\?|==|<=|<|>|>=)\\s+([-A-Za-z0-9_.#$]+|(['\"])[^`]*?\\3)",
					"captures": {
						"1": { "name": "keyword.operator.logical.mgs" },
						"2": { "name": "string.variable.mgs" }
					}
				}
			]
		},
		"script_node": {
			"begin": "(script\\s+)?(((([-A-Za-z0-9_.#$]+)|((['\"])[^`]*?\\7))))\\s+({)",
			"beginCaptures": {
				"1": { "name": "keyword.control.assignment.mgs" },
				"2": { "name": "entity.name.function.mgs" },
				"8": { "name": "mega.block.mgs punctuation.section.block.begin.mgs" }
			},
			"end": "}",
			"endCaptures": {
				"0": { "name": "mega.block.mgs punctuation.section.block.end.mgs" }
			},
			"patterns": [
				{ "include": "#script_body" }
			]
		},
		"script_constants": {
			"patterns": [
				{
					"name": "constant.numeric.integer.mgs",
					"match": "([0-9]+(ms|px)?)"
				},
				{
					"name": "constant.numeric.integer.mgs",
					"match": "(-?[0-9]+)"
				},
				{
					"name": "constant.numeric.integer.mgs",
					"match": "\\b((once|twice|thrice)|([0-9]+x?))"
				}
			]
		},
		"script_variables": {
			"name": "string.variable.mgs variable.parameter.mgs",
			"match": "#[0-9A-F]+"
		}
	},
	"scopeName": "source.mgs"
}